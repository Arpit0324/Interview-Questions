Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*'.

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

Note:

s could be empty and contains only lowercase letters a-z.
p could be empty and contains only lowercase letters a-z, and characters like ? or *.
Example 1:

Input:
s = "aa"
p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".


class Solution {
    public boolean isMatch(String s, String p) {
            
           boolean[][] dp = new boolean[s.length()+1][p.length()+1];
           dp[0][0] = true;
        
           char[] string = new char[s.length()+1];
           char[] pattern = new char[p.length()+1];
            
           string[0] = (char)0;
           pattern[0] = (char)0;
           
           for(int i=0;i<s.length();i++){
               string[i+1] = s.charAt(i);
           }
           for(int i=0;i<p.length();i++){
               pattern[i+1] = p.charAt(i);
           }
        
           for(int i=1;i<pattern.length;i++){
               if(pattern[i]=='*' && dp[0][i-1]==true){
                   dp[0][i] =true;
               } 
           }
        
          for(int i=1;i<string.length;i++){
              for(int j=1;j<pattern.length;j++){
                  if(string[i]==pattern[j] || pattern[j]=='?'){
                      dp[i][j] = dp[i-1][j-1];
                  }else if(pattern[j]=='*'){
                      dp[i][j] = dp[i-1][j] || dp[i][j-1];
                  }
              }
          }
        
        return dp[s.length()][p.length()];

        }         
    }
 

    
