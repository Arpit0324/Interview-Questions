Given a string s of '(' , ')' and lowercase English characters. 

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.

Example 1:

Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.

 public String minRemoveToMakeValid(String s) {
        Stack<Character> ct = new Stack();
        Stack<Integer> index = new Stack();
        
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='('){
                 ct.add('(');
                 index.add(i);
            }else if(s.charAt(i)==')'){
                if(!ct.isEmpty() && ct.peek()=='('){
                    ct.pop();
                    index.pop();
                }else{
                    index.add(i);
                }
            }
        }
                     
        StringBuilder b = new StringBuilder();
        int[] st = new int[s.length()];
        
        while(!index.isEmpty()){
            st[index.pop()] = 1;
        }
        
        for(int i=0;i<s.length();i++){
            if(st[i]==0){
                b.append(s.charAt(i));
            } 
        }
                     
        return b.toString();
                     
    }
