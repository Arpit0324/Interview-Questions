By now, you are given a secret signature consisting of character 'D' and 'I'. 'D' represents a decreasing relationship between two numbers, 'I' represents an increasing relationship between two numbers. And our secret signature was constructed by a special integer array, which contains uniquely all the different number from 1 to n (n is the length of the secret signature plus 1). For example, the secret signature "DI" can be constructed by array [2,1,3] or [3,1,2], but won't be constructed by array [3,2,4] or [2,1,3,4], which are both illegal constructing special string that can't represent the "DI" secret signature.

On the other hand, now your job is to find the lexicographically smallest permutation of [1, 2, ... n] could refer to the given secret signature in the input.

Example 1:
Input: "I"
Output: [1,2]
Explanation: [1,2] is the only legal initial spectial string can construct secret signature "I", where the number 1 and 2 construct an increasing relationship.


 public static int[] findPermutation(String s) {
         
      int[] per = new int[s.length()+1];
       Stack<Integer> stack = new Stack();
       int index = 0;
       
       for(int i=0;i<s.length();i++){
           if(s.charAt(i)=='I'){
                stack.add(i+1);
                while(!stack.isEmpty()){
                    per[index++] = stack.pop();
                }
           }else{
                stack.add(i+1);
           }
       }
       
       stack.add(s.length()+1);
       while(!stack.isEmpty()){
                    per[index++] = stack.pop();
                }
     
       return per;
   }
