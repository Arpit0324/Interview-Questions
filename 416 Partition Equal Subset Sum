
Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

Note:

Each of the array element will not exceed 100.
The array size will not exceed 200.
 

Example 1:

Input: [1, 5, 11, 5]

Output: true

Explanation: The array can be partitioned as [1, 5, 5] and [11].


class Solution {
    public boolean canPartition(int[] nums) {
        int sum = 0;
        for(int i=0;i<nums.length;i++){
            sum = sum + nums[i];
        }
        int half = sum/2;
        
        boolean[][] dp = new boolean[nums.length+1][half+1];
        
        for(int i=0;i<dp.length;i++){
            dp[i][0] = true;
        }

       
        for(int i=1;i<dp.length;i++){//1 5 5 11
            for(int j=1;j<dp[0].length;j++){//0----------11
                if(nums[i-1]<=j){
                    dp[i][j] = dp[i-1][j] || dp[i-1][j-nums[i-1]];        
                }else{
                     dp[i][j] = dp[i-1][j];
                }
            }
        }
        
        return dp[nums.length][half+1];
        
    }
}


   





