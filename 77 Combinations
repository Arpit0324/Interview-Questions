Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

Example:

Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]


 public List<List<Integer>> combine(int n, int k) {//n==3
        
        List<List<Integer>> subset = new ArrayList();
        dfs(subset,1,new ArrayList(),n,k);
        return subset;
        
    }
    
    void dfs( List<List<Integer>> subset,int index,List<Integer> current,int n,int k){
               
                if(current.size()==k){
                  subset.add(new ArrayList(current));
                    return;
                }
               
        
                for(int i=index;i<=n;i++){
                    current.add(i);
                    dfs(subset,i+1,current,n,k);
                    current.remove(current.size()-1);           
                } 
    }
