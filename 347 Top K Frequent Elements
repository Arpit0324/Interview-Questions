Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]

public int[] topKFrequent(int[] nums, int k) {
        
    
      HashMap<Integer,Integer> map = new HashMap(); //step1
        
      int ans[] = new int[k];
      
      for(int i=0;i<nums.length;i++){
         map.put(nums[i],map.getOrDefault(nums[i],0)+1);

      }
      
      PriorityQueue<Integer> pq = new PriorityQueue<>((a,b)->map.get(b)-map.get(a));
        
      for(Map.Entry<Integer,Integer> entry : map.entrySet()){
          pq.add(entry.getKey());
      }
    
     
      int index = 0;
      while(k>0){
          ans[index] = pq.poll();
          index++;
          k--;
      }
        
      return ans;         
    }



//Approach

//nums = [1,1,1,2,2,3], k = 2

//Step1 HashMap<Integer,Integer> map

//key  count
//1 --- 3
//2-----2
//3-----1
//5-----6

//Step 2 PriorityQueue<Integer> [5,1,2,3]

//Step 3 ans[2] = 5 , 1
