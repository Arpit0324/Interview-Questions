Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

Example 1:

Input: [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
             Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
             
             public int maxProfit(int[] prices) {
       int b1 = Integer.MAX_VALUE;
       int b2 = Integer.MAX_VALUE;
       int p1 = 0 , p2 = 0;
       for(int i=0;i<prices.length;i++){
           b1 = Math.min(b1,prices[i]);    
           p1 = Math.max(p1,prices[i]-b1);   
           b2 = Math.min(b2,prices[i]-p1);
           p2 = Math.max(p2,prices[i]-b2);
       }  
       return p2;
    }
